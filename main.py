from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from services.db import init_db
from handlers.record import handle_fap, handle_poop
from handlers.stats import handle_stats
from dotenv import load_dotenv
import os
from handlers.lang import handle_lang, handle_lang_choice
from telegram.ext import CallbackQueryHandler
from handlers.reset import handle_reset, handle_reset_callback
from handlers.settings import handle_settings, handle_period_selection
from telegram.ext import CallbackQueryHandler, CommandHandler
from scheduler import start_scheduler
from telegram import BotCommand


# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –î—Ä–æ—á–∏–ª—å–Ω—è üí©‚úä\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /fap –∞–±–æ /poop –¥–ª—è –∑–∞–ø–∏—Å—É.\n/stats ‚Äî —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    import asyncio

    async def main():
        init_db()

        app = ApplicationBuilder().token(BOT_TOKEN).build()

        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("settings", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤"),
            BotCommand("lang", "–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É"),
            BotCommand("reset", "–û–±–Ω—É–ª–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        ]
        await app.bot.set_my_commands(commands)

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("fap", handle_fap))
        app.add_handler(CommandHandler("poop", handle_poop))
        app.add_handler(CommandHandler("stats", handle_stats))
        app.add_handler(CommandHandler("lang", handle_lang))
        app.add_handler(CallbackQueryHandler(handle_lang_choice, pattern="^lang_"))
        app.add_handler(CommandHandler("reset", handle_reset))
        app.add_handler(CallbackQueryHandler(handle_reset_callback, pattern="^confirm_reset|cancel_reset$"))
        app.add_handler(CommandHandler("settings", handle_settings))
        app.add_handler(CallbackQueryHandler(handle_period_selection, pattern="^report_"))

        start_scheduler(app.bot)

        await app.run_polling()

    asyncio.run(main())


import logging

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.ERROR
)
start_scheduler(app.bot)
app.run_polling()
