import os
import asyncio
import logging
from dotenv import load_dotenv
from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
)

# –Ü–º–ø–æ—Ä—Ç–∏ –≤–ª–∞—Å–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
from services.db import init_db
from services.translations import tr
from handlers.record import handle_fap, handle_poop
from handlers.stats import handle_stats
from handlers.lang import handle_lang, handle_lang_choice
from handlers.reset import handle_reset, handle_reset_callback
from handlers.settings import handle_settings, handle_period_selection
from scheduler import start_scheduler
from handlers.stats import handle_stats, send_stats, handle_report_test, handle_winner_test


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.ERROR
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(tr(chat_id, "start"))

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    init_db()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand("stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("settings", "üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤"),
        BotCommand("lang", "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É"),
        BotCommand("reset", "‚ôªÔ∏è –û–±–Ω—É–ª–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
        BotCommand("fap", "‚úä –î–æ–¥–∞—Ç–∏ –¥—Ä–æ—á—ñ–Ω–Ω—è"),
        BotCommand("poop", "üí© –î–æ–¥–∞—Ç–∏ –∫–∞–∫–∞–Ω–Ω—è"),
        BotCommand("reporttest", "üß™ –¢–µ—Å—Ç –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"),
        BotCommand("winner", "üèÜ –¢–µ—Å—Ç –ø–µ—Ä–µ–º–æ–∂—Ü—è —Ä–æ–∫—É")
    ]
    await app.bot.set_my_commands(commands)

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("fap", handle_fap))
    app.add_handler(CommandHandler("poop", handle_poop))
    app.add_handler(CommandHandler("stats", handle_stats))
    app.add_handler(CommandHandler("lang", handle_lang))
    app.add_handler(CallbackQueryHandler(handle_lang_choice, pattern="^lang_"))
    app.add_handler(CommandHandler("reset", handle_reset))
    app.add_handler(CallbackQueryHandler(handle_reset_callback, pattern="^confirm_reset|cancel_reset$"))
    app.add_handler(CommandHandler("settings", handle_settings))
    app.add_handler(CallbackQueryHandler(handle_period_selection, pattern="^report_"))
    app.add_handler(CommandHandler("reporttest", handle_report_test))
    app.add_handler(CommandHandler("winner", handle_winner_test))

    # ‚úÖ –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    from telegram.error import TelegramError

    async def error_handler(update, context):
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {context.error}")

    app.add_error_handler(error_handler)

    # ‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    start_scheduler(app.bot)

    # ‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await app.run_polling()


# –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ asyncio
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())

